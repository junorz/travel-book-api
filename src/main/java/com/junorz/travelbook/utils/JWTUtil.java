package com.junorz.travelbook.utils;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.junorz.travelbook.context.ApplicationInfo;
import com.junorz.travelbook.context.ApplicationInfo.TokenInfo;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

/**
 * JSON Web Token Utility.<br>
 * This utility used for generating token, and verifying token.
 * <p>
 * P.S. RSA keypair can be generated by openssl.<br>
 * [PrivateKey] openssl genpkey -algorithm RSA -out rsa_private.pem -pkeyopt
 * rsa_keygen_bits:4096<br>
 * [PublicKey] openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem
 * 
 * @see https://cloud.google.com/iot/docs/how-tos/credentials/keys
 */
public class JWTUtil {

    private ApplicationInfo applicationInfo;

    // token will be expired in 1 day
    private static long EXPIRED_TIME = 24 * 3600 * 1000;

    @Autowired
    public void setApplicationInfo(ApplicationInfo applicationInfo) {
        this.applicationInfo = applicationInfo;
    }

    /**
     * Generate a JWT token based on travel book's ID
     * 
     * @param travelBookId
     * @return JWT token
     */
    public String generateToken(String travelBookId) {
        // The expired date time is based on UTC
        long expiredTime = System.currentTimeMillis() + EXPIRED_TIME;
        LocalDateTime expiredDateTime = LocalDateTime.ofEpochSecond(expiredTime / 1000, 0, ZoneOffset.UTC);

        String jws = Jwts.builder().setExpiration(new Date(expiredTime)).claim("travelBookId", travelBookId)
                .signWith(applicationInfo.getPrivateKey(), SignatureAlgorithm.RS512).compact();

        // store token to token history list
        synchronized (applicationInfo) {
            applicationInfo.getTokenHistories().put(jws,
                    applicationInfo.createTokenInfo(travelBookId, expiredDateTime));
        }

        return jws;
    }

    /**
     * Parse a JWT token
     * 
     * @param token
     * @return
     */
    public Jws<Claims> parseToken(String token) {
        return Jwts.parser().setSigningKey(applicationInfo.getPublicKey()).parseClaimsJws(token);
    }

    /**
     * Check if the token is valid.
     * 
     * @param token
     * @return Return true is the token is valid
     */
    public boolean isTokenValid(String token) {
        try {
            parseToken(token);
        } catch (JwtException e) {
            return false;
        }
        return true;
    }

    /**
     * Refresh token based on travelbook's Id and old token.
     * 
     * @param oldToken
     * @param travelBookId
     * @return new Token
     */
    public String refreshToken(String oldToken, String travelBookId) {
        String newToken = null;
        synchronized (applicationInfo) {
            Map<String, TokenInfo> tokenHistories = applicationInfo.getTokenHistories();
            if (tokenHistories.containsKey(oldToken)
                    && travelBookId.equals(tokenHistories.get(oldToken).getTravelBookId())) {
                newToken = generateToken(travelBookId);
                tokenHistories.remove(oldToken);
            }
        }
        return newToken;
    }

}
