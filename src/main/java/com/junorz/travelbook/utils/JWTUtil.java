package com.junorz.travelbook.utils;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyFactory;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.junorz.travelbook.config.SecurityConfig.JWTInfo;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

/**
 * JSON Web Token Utility.<br>
 * This utility used for generating token, and verifying token.
 * <p>
 * P.S. RSA keypair can be generated by openssl.<br>
 * [PrivateKey] openssl genpkey -algorithm RSA -out rsa_private.pem -pkeyopt rsa_keygen_bits:4096<br>
 * [PublicKey] openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem
 * @see https://cloud.google.com/iot/docs/how-tos/credentials/keys
 */
public class JWTUtil {
    
    private static final Logger logger = LoggerFactory.getLogger(JWTUtil.class);
    private JWTInfo jwtInfo;
    
    // token will be expired in 1 day
    private static long EXPIRED_TIME = 24 * 3600 * 1000;
    
    @Autowired
    public void setJwtInfo(JWTInfo jwtInfo) {
        this.jwtInfo = jwtInfo;
    }
    
    private Key getPrivateKey() {
        try (InputStream is = new FileInputStream(jwtInfo.getPrivateKeyPath());
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))){
            StringBuilder sb = new StringBuilder();
            reader.lines().forEach(line -> sb.append(line));
            String privateKeyString = sb.toString()
                    .replace("-----BEGIN PRIVATE KEY-----", "")
                    .replace("-----END PRIVATE KEY-----", "");
            KeyFactory kf = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyString));
            return kf.generatePrivate(keySpec);
        } catch (Exception e) {
            logger.error("An exception has occurred while trying to get private key.");
            throw new RuntimeException(e);
        }
    }
    
    private Key getPublicKey() {
        try (InputStream is = new FileInputStream(jwtInfo.getPublicKeyPath());
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {
            StringBuilder sb = new StringBuilder();
            reader.lines().forEach(line -> sb.append(line));
            String publicKeyString = sb.toString()
                    .replace("-----BEGIN PUBLIC KEY-----", "")
                    .replace("-----END PUBLIC KEY-----", "");
            KeyFactory kf = KeyFactory.getInstance("RSA");
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyString));
            return kf.generatePublic(keySpec);
        } catch (Exception e) {
            logger.error("An exception has occurred while trying to get public key.");
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Generate a JWT token based on travel book's ID
     * @param travelBookId
     * @return JWT token
     */
    public String generateToken(String travelBookId) {
        String jws = Jwts.builder()
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRED_TIME))
                .claim("travelBookId", travelBookId)
                .signWith(getPrivateKey(), SignatureAlgorithm.RS512)
                .compact();
        return jws;
    }
    
    /**
     * Parse a JWT token
     * @param token
     * @return 
     */
    public Jws<Claims> parseToken(String token) {
        Jws<Claims> jws = null;
        try {
            jws = Jwts.parser()
                    .setSigningKey(getPublicKey())
                    .parseClaimsJws(token);
        } catch (JwtException e) {
            logger.error("Invalid token");
        }
        return jws;
    }
    
    /**
     * Check if the token is valid.
     * @param token
     * @return Return true is the token is valid
     */
    public boolean isTokenValid(String token) {
        return parseToken(token) != null ? true : false;
    }
    
}
